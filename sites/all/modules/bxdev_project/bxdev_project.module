<?php

module_load_include('inc', 'bxdev_project', 'bxdev_project.forms');

/**
 * HOOKS
 */

/**
 * Implements hook_views_api().
 */
function bxdev_project_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function bxdev_project_menu() {
  $items['project/%node/claim'] = array(
    'page callback' => 'bxdev_project_claim_callback',
		'page arguments' => array(1),
    'access arguments' => array('pc'),
    'type' => MENU_CALLBACK,
  );

	$items['project/%/reset/client'] = array(
		'page callback' => 'bxdev_project_reset_client_callback',
		'page arguments' => array(1),
		'access arguments' => array('pc'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%/approve'] = array(
		'page callback' => 'bxdev_project_approve_callback',
		'page arguments' => array(1),
		'access arguments' => array('client'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%node/download/doc'] = array(
		'page callback' => 'bxdev_project_download_production_details',
		'page arguments' => array(1),
		'access arguments' => array('view production details'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/%/photos'] = array(
		'title' => t('Photo review'),
		'page callback' => 'bxdev_project_photo_approval_page',
		'page arguments' => array(1),
		'access arguments' => array('view project photos'),
		'type' => MENU_CALLBACK,
	);
	
	$items['sales/add/project/%node'] = array(
	  'title' => t('Create a New Video Project'),
		'page callback' => 'bxdev_project_create_project_page',
		'page arguments' => array(3),
		'file path' => drupal_get_path('module','node'),
    'file' => 'node.pages.inc',
	  'access arguments' => array('add new project'),
	  'type' => MENU_CALLBACK,
	);
	
	$items['client/terms/%/%'] = array(
		'title' => t('Review and accept the client service agreement'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('bxdev_project_client_terms_form', 2, 3),
		'access arguments' => array(2, 3),
		'access callback' => 'bxdev_project_client_terms_access',
		'type' => MENU_CALLBACK,
	);
	
	$items['project/videographer/%/w9'] = array(
		'page callback' => 'bxdev_project_send_videographer_w9_reminder',
		'page arguments' => array(2),
		'access arguments' => array('administer videographer payments'),
	);
	
	$items['project/terms/resend/%'] = array(
		'page callback' => 'bxdev_project_terms_client_resend',
		'page arguments' => array(3),
		'access arguments' => array('add new project'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/spec/contact/%'] = array(
		'page callback' => 'bxdev_project_spec_contact',
		'page arguments' => array(3),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/spec/client/%'] = array(
		'page callback' => 'bxdev_project_spec_client',
		'page arguments' => array(3),
		'access arguments' => array('add new project'),
		'type' => MENU_CALLBACK,
	);
	
	$items['ezweb/download/%node'] = array(
		'page callback' => 'bxdev_project_ezweb_download',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	$items['project/photo/download/%node'] = array(
		'page callback' => 'bxdev_project_photo_download_callback',
		'page arguments' => array(3),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
  return $items;
}

/**
 * Implements hook_mail().
 */
function bxdev_project_mail($key, &$message, $params) {
	global $base_url;
	
	$email = bxdev_email_get_email_by_name($key);
	
	$message['subject'] = token_replace($email->subject, $params);
	$message['body'][] = token_replace($email->body, $params);	
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
	
	if(!empty($params['headers']['cc'])){
		$message['headers']['cc'] = $params['headers']['cc'];
	}
	
	if(!empty($params['headers']['bcc'])){
		$message['headers']['bcc'] = $params['headers']['bcc'];
	}
	
	
}

/**
 * Implements hook_node_insert().
 */
function bxdev_project_node_insert($node) {
  switch($node->type){	
		case 'project':
			global $user;
			// load the business node object
			$business = node_load($node->field_project_business_ref['und'][0]['nid']);
			// log action
			watchdog('lightswitch', 'New project: @title, nid: @nid', array('@title' => $node->title, '@nid' => $node->nid));
			$project = new Project($node->nid);
			$project->log('admin', 'Project added');
			$project->set_status(1);
			if(bxdev_user_get_role($user->uid) == 'sales'){
				$project->send_new_project_notify();
			}
			
			// set the business profile video default
			if(empty($business->field_profile_video_ref)){
				$business->field_profile_video_ref['und'][0]['nid'] = $node->nid;
				node_save($business);
			}
			
			// check if direct sale video, if so send client the terms email
			if($node->field_video_type['und'][0]['value'] == 'direct_sale'){
				// create the project CSA hash
				$project->create_client_terms_hash();
				// if admin has selected to send client a CSA email
				if($node->field_client_send_terms['und'][0]['value'] == 0){
					$project->send_client_terms();
				}				
			}
			
			break;
			
		case 'comment':
			$project = new Project($node->field_project_ref['und'][0]['nid']);
			$author_role = bxdev_user_get_role($node->uid);
			// if the first pc comment
			if($author_role == 'pc' && $node->field_comment_type['und'][0]['value'] == 'client' && $project->is_pc_first_comment()){
				if(!$project->overridden){
					// set the status to 4 - Version 1 to Client
					$project->set_status(4);
					$project->log('admin', 'Project auto updated to 4 - Version 1 to Client');
				}
				$user = new User();
				$user->load($project->client->uid);
				$user->send_client_project_login($project);
			}else{
				// notify all appropriate users
				$project->comment_notify($node->nid);
			}
			$client_comments = array();
			// count client's comments
			foreach($project->comments as $comment){
				if($comment->uid == $project->client->uid){
					$client_comments[] = $comment->nid;
				}
			}
			// if client has posted at least one comment, set status to 5 - Revision
			if(!empty($client_comments) && !$project->overridden){
				$project->set_status(5);
				$project->log('admin', 'Project auto updated to 5 - Revision');
			}
	}
}

/**
 * Implements hook_node_update().
 */
function bxdev_project_node_submit(&$node, $form, &$form_state) {
	global $user;
	$role = bxdev_user_get_role($user->uid);
	$values = $form_state['values'];
	switch($node->type){
		case 'project':
		
			if(!is_null($node->nid) && $role == 'pc'){
		
			  $project = new Project($node->nid);
				$old_status = $project->get_status();			
				$new_status = $values['field_status']['und'][0]['value'];
			
				// detect if manually overridden
				if($old_status != $new_status){
					$node->field_status_date['und'][0]['value'] = time();
					$node->field_status_override['und'][0]['value'] = 1;
				}
			
				// check if project is currently status 2 (claimed), a videographer has been assigned, and project is not manually overridden
				if($project->get_status() == 2 && !empty($node->field_videog_ref['und']) && $node->field_status_override['und'][0]['value'] !== 1){
					// set status to 3 (assigned)
					$node->field_status['und'][0]['value'] = 3;
					// send the videographer notification
					$account = user_load($node->field_videog_ref['und'][0]['uid']);
					$project->send_videographer_project_assign($account->mail);
					// log the action
					$project->log('admin', 'Project auto updated to 3 - Assigned');
				}
				
				// check if new sales value is set and is not "none"
				if(!empty($node->field_author['und'][0]['uid'])){
					$old_sales = (!empty($project->project->field_author['und'][0]['uid'])) ? $project->project->field_author['und'][0]['uid'] : '';
					if($node->field_author['und'][0]['uid'] != $old_sales){
						$project->send_sales_assigned($node->field_author['und'][0]['uid']);
					}
				}
				
				// check if new pc is being manually assigned
				if(!empty($node->field_pc_ref['und'][0]['uid'])){
					$old_pc = !empty($project->project->field_pc_ref['und'][0]['uid']) ? $project->project->field_pc_ref['und'][0]['uid'] : '';
					if($node->field_pc_ref['und'][0]['uid'] != $old_pc){
						$project->send_claim($node->field_pc_ref['und'][0]['uid']);
					}
				}
				
				// check if pc is manually approving the project
				$old_approved = $project->project->field_approved['und'][0]['value'];
				$new_approved = $node->field_approved['und'][0]['value'];

				if($old_approved == 0 && $new_approved == 1){
					// set status to 6 (approved)
					$node->field_status['und'][0]['value'] = 6;
					// send the email
					$project->send_approved_manual();
				}
			
			// if the node is new (being inserted)
			}else if(is_null($node->nid)){
				// set a default due date if the video shoot date is set
				if(!empty($values['bxdev_shoot_date'])){
					$node->field_due_date['und'][0]['value'] = strtotime('+ 10 days', strtotime($values['bxdev_shoot_date']));
				}				
			}
			
			// set the timestamp for date value1
			$timestamp1 = strtotime($values['bxdev_shoot_date'] . ' ' . $values['bxdev_shoot_time1']);
			// initially set timestamp2 the same as timestamp1 (no end time)
			$timestamp2 = $timestamp1;
			// if an end time exists, change timestamp2
			if($values['bxdev_shoot_time2'] != ''){
				$timestamp2 = strtotime($values['bxdev_shoot_date'] . ' ' . $values['bxdev_shoot_time2']);
			}
			// set the fields
			$node->field_shoot_date['und'][0]['value'] = $timestamp1;
			$node->field_shoot_date['und'][0]['value2'] = $timestamp2;
			
			// if a credit card was selected in step one, store the payment id with the Project
			if(isset($_SESSION['payment']['payment_id']) && arg(0) == 'sales' && arg(1) == 'add' && arg(2) == 'project'){
				$node->field_payment_id['und'][0]['value'] = $_SESSION['payment']['payment_id'];
				$node->field_project_type['und'][0]['value'] = $_SESSION['payment']['project_type'];
				$node->field_payment_notes['und'][0]['value'] = $_SESSION['payment']['payment_notes'];
				$node->field_line_item_desc['und'][0]['value'] = $_SESSION['payment']['line_item_description'];
				$node->field_charge_amount['und'][0]['value'] = $_SESSION['payment']['cc_amount'];
				unset($_SESSION['payment']);
			}
			
			break;
	}
}

/**
 * Implements hook_preprocess_node().
 */
function bxdev_project_preprocess_node(&$vars){
	
	if($vars['type'] == 'project'){		
		
		// navigation controls
		if(user_access('pc')){
			$navigation = isset($_SESSION['projects_master_filters']) ? ' <a href="' . $_SESSION['projects_master_filters'] . '" class="back">&lt; Back to master list</a>' : ' <a href="/projects/master" class="back">&lt; Back to master list</a>';
			$vars['navigation'] = $navigation;
		}else if(user_access('sales')){
			$navigation = ' <a href="/user" class="back">&lt; Back to projects</a>';
			$vars['navigation'] = $navigation;
		}
		
		// load up some variables
		global $user;
		$role = bxdev_user_get_role($user->uid);
		$profile = '';		
		$nid = $vars['nid'];
		$project = new Project($nid);
		$content = node_view($project->project);
		
		// pass the role to the template
		$vars['role'] = $role;
		
		// if videographer role, get the profile
		if($role == 'videographer'){
			$profile = profile2_load_by_user($user->uid, 'videographer');
		}
		
		// send the objects to the tpl
		$vars['business'] = $project->business;
		$vars['client'] = $project->client;
		$vars['pc'] = $project->pc;
		$vars['videographer'] = $project->videographer;
		$vars['sales'] = $project->sales;
		
		// check if project has been approved
		$vars['approved'] = $vars['field_approved'][0]['value'];
		
		// approve button
		if(bxdev_user_get_role($user->uid) == 'client'){
			$approve_button = '<span class="approve-or">or</span> <a class="approve-btn" href="">Approve</a>';
			$approve_button .= '<div class="approve-confirm" style="display:none;"><h3>Are you sure you wish to approve this project?</h3><p>After approval, comments will no longer be able to be posted.</p><a class="approve-yes" href="/project/' . $nid . '/approve">Approve</a> <a href="" class="approve-cancel">Cancel</a></div>';
			$vars['approve_button'] = $approve_button;
		}
		
		// production details
		if(user_access('view production details')){
			$production_details = '<div class="block prod-details-wrap">
				<div class="download-doc"><a href="/project/' . $nid . '/download/doc">Download Word Doc</a></div>
				<div class="download-doc"><a href="/sites/default/files/Lightswitch-Production-Release.pdf">Download Release</a></div>
				<div class="trigger">
					<h2>Production Details</h2>
				</div>
				<div class="trigger-list prod-details">';
			$production_details .= (isset($content['field_shoot_date'])) ? render($content['field_shoot_date']) : '';
			$production_details .= (isset($content['field_voice_over'])) ? render($content['field_voice_over']) : '';
			$production_details .= (isset($content['field_voice_over_gender'])) ? render($content['field_voice_over_gender']) : '';
			$production_details .= (isset($content['field_owner_interview'])) ? render($content['field_owner_interview']) : '';
			$production_details .= (isset($content['field_script_notes'])) ? render($content['field_script_notes']) : '';
			$production_details .= (isset($content['field_logo'])) ? render($content['field_logo']) : '';
			$production_details .= (isset($content['field_photos'])) ? render($content['field_photos']) : '';
			$production_details .= (isset($content['field_features_include'])) ? render($content['field_features_include']) : '';
			$production_details .= (isset($content['field_features_avoid'])) ? render($content['field_features_avoid']) : '';
			$production_details .= (isset($content['field_unique'])) ? render($content['field_unique']) : '';
			$production_details .= (isset($content['field_video_type'])) ? render($content['field_video_type']) : '';
			$production_details .= (isset($content['field_pc_notes'])) ? render($content['field_pc_notes']) : '';
			$production_details .= (isset($content['field_author'])) ? render($content['field_author']) : '';
			$production_details .=	'</div></div>';
			$vars['production_details'] = $production_details;
		}		
		
		// production history
		if(user_access('view production history')){
			$vars['production_history'] = bxdev_project_get_production_log($nid);
		}
		
	  // if user is sales or pc, allow edit / delete
		if(user_access('sales') || user_access('pc')){
			$operations = '<div class="edit"><a href="/node/' . $vars['node']->nid . '/edit">Edit</a></div>';
			$operations .= '<div class="delete"><a href="/node/' . $vars['node']->nid . '/delete">Delete</a></div>';
			$vars['operations'] = $operations;
		}
						
		// photos
				
		// get renderable arrays
		$project_full = node_view($project->project, 'full');
		$project_teaser = node_view($project->project, 'teaser');
	
		// get approved photos
		$results = db_query("SELECT fid FROM {project_photos_approval} WHERE nid = :nid", array(':nid' => $nid));
		$approved_photos = array();
		if($results->rowCount() > 0){
			foreach($results as $row){
				$approved_photos[] = $row->fid;
			}
		}
	
		// if approved photos exist
		$approved_photos = $project->get_approved_photos();
		$photos_teaser = '<div class="clearfix">';
		$photos = array();
		// cycle through each project photo
		foreach($project_full['field_project_photos'] as $key => $value){
			// if photo
			if(is_numeric($key)){
				// if approved
				if(in_array($value['#item']['fid'], $approved_photos)){
					// get the teaser photo
					$photos_teaser .= '<div class="project-thumb"><a rel="shadowbox[images]" href="' . image_style_url('approval', $value['#item']['uri']) . '">' . theme('image_style', array('path' => $value['#item']['uri'], 'style_name' => 'project_thumb')) . '</a></div>';
				}
			}
		}
		$photos_teaser .= '</div>';
		if($role != 'videographer'){
			$photos_teaser .= '<div><a href="/project/' . $nid . '/photos">View photos</a></div>';
		}
		$vars['photos_teaser'] = $photos_teaser;
		
		// business logo upload
		if(user_access('upload business logo')){
			$vars['business_logo_upload'] = render(drupal_get_form('bxdev_project_logo_upload_form'));
		}
		
		// check if client has accepted the project terms
		if($project->project->field_video_type['und'][0]['value'] == 'direct_sale' && (empty($project->project->field_client_terms_accepted) || $project->project->field_client_terms_accepted['und'][0]['value'] == 0)){
			
			// if user is Client, redirect to terms page
			if($role == 'client'){
				$hash = db_select('users_project_terms', 'upt')
					->fields('upt', array('hash'))
					->condition('nid', $nid)
					->execute()
					->fetchField();
				if(!empty($hash)){
					drupal_goto('client/terms/' . $nid . '/' . $hash . '/redirect');
				}
			}
			
			$vars['client_terms_not_accepted'] = '<div class="client-terms-not-accepted">
				<h2>Client has not accepted Project terms!</h2>
				<a href="/project/terms/resend/' . $project->project->nid . '">Click here to send another reminder</a>
			</div>';
		}
		
		// check the video type
		$video_type = $project->project->field_video_type['und'][0]['value'];
		$vars['video_class'] = $video_type;
		
		if($video_type == 'spec' && (user_access('sales') || user_access('pc'))){
			$vars['spec_send'] = '';
			$results = db_select('project_spec_notify', 'p')
				->fields('p')
				->condition('pid', $nid)
				->execute()
				->fetchObject();
			if(!empty($results)){
				$timestamp = strtotime($results->date);
				$vars['spec_send'] .= '<div>Client was sent login details on ' . date('m/d/Y', $timestamp) . '</div>';
			}
			$vars['spec_send'] .= '<a href="/project/spec/client/' . $nid . '">Send Client login email</a>';				
		}
		
		// check if charge amount
		if(!empty($project->project->field_charge_amount['und'][0]['value']) && $role == 'pc' && $video_type != 'spec'){
			$vars['charge_amount'] = bxdev_format_currency($project->project->field_charge_amount['und'][0]['value']);
		}
		
		// check for EZWebPlayer short link
		if(!empty($content['field_project_video']['#items'][0]['file'])){
			$scheme = file_uri_scheme($content['field_project_video']['#items'][0]['file']->uri);
			if($scheme == 'ezweb'){
				$short_link = 'Quick Link - Use this link to show your video without sharing your log in info:<br/> <a href="http://lsvids.tv/V' . $content['field_project_video']['#items'][0]['file']->filename . '" target="_blank">http://lsvids.tv/V' . $content['field_project_video']['#items'][0]['file']->filename . '</a>';
				$vars['ezweb_short_link'] = $short_link;
			}
		}
		
		/**
		 * Downloads
		 */
		
		$disable_downloads = isset($project->project->field_disable_file_download['und'][0]['value']) && $project->project->field_disable_file_download['und'][0]['value'] == 1;
		
		// check for EZWebPlayer download link
		if($project->approved && !empty($content['field_project_video'][0]['file']['#file_download']) && !$disable_downloads && $role != 'videographer'){
			$vars['ezweb_download_link'] = '<a class="btn" href="' . $content['field_project_video'][0]['file']['#file_download'] . '">Download Video</a>';
		}
		
		// check for manual file download
		if(!empty($project->project->field_project_video_file['und'][0]['uri']) && !$disable_downloads && $role != 'videographer'){
			$vars['video_file_download'] = '<div class="video-file-download"><a target="_blank" class="btn" href="' . file_create_url($project->project->field_project_video_file['und'][0]['uri']) . '">Download Video</a></div>';
		}
		
		// check for photo download
		if($project->approved && !empty($project->project->field_project_photos['und']) && $role != 'videographer'){
			$vars['photo_download_link'] = '<a class="btn" href="/project/photo/download/' . $nid . '">Download Photos</a>';
		}
		
	}
}

/**
 * Implements hook_preprocess_page().
 */
function bxdev_project_preprocess_page(&$vars){
	if(arg(0) == 'projects' && arg(1) == 'master'){
		$_SESSION['projects_master_filters'] = $_SERVER['REQUEST_URI'];
	}
}


/**
 * CUSTOM
 */

/**
 * Page callback: create project
 */
function bxdev_project_create_project_page($user){
	
	drupal_add_js(drupal_get_path('module', 'bxdev_payment') . '/bxdev_payment.js');
	
	$output = !empty($_SESSION['payment']) ? '<h2><strong>Project Info</strong> (step 3 of 3)</h2>' : '<h2><strong>Project Info</strong> (step 2 of 2)</h2>';
	$output .= drupal_render(node_add('project'));

	return $output;
}

/**
 * Page callback: photo approval
 */
function bxdev_project_photo_approval_page($nid){
	$project_path = drupal_lookup_path('alias', 'node/' . $nid);
	$output = '<a href="/' . $project_path . '">Back to project</a>';
	$output .= render(drupal_get_form('bxdev_project_photo_approval_form'));
	return $output;
}

/**
 * Menu callback: videographer w9 reminder
 */
function bxdev_project_send_videographer_w9_reminder($nid){
	$project = new Project($nid);
	$project->send_videographer_w9_reminder();
	drupal_set_message('A W9 form reminder has been sent to ' . $project->videographer->field_name['und'][0]['value']);
	drupal_goto('node/' . $nid . '/edit/payments');
}

/**
 * Menu callback: project claim
 */
function bxdev_project_claim_callback($node, $role = NULL){
	global $user;
	
	// if a role is supplied as an argument
	if(!is_null($role)){
	
		if($role == 'editor'){
			$node->field_project_editor['und'][0]['uid'] = $user->uid;
			node_save($node);		
		}
	
	// if no role is supplied, claim as pc
	}else{
		$node->field_pc_ref['und'][0]['uid'] = $user->uid;
		node_save($node);
		$project = new Project($node->nid);
		if(!$project->overridden){
			$project->set_status(2);
			$project->log('admin', 'Project auto updated to 2 - Claimed');
			$project->send_claim($user->uid);
		}
	}
	
	drupal_set_message('You have claimed Project: ' . $node->title);
	drupal_goto('user/' . $user->uid);
}

/**
 * Menu callback: reset client
 */
function bxdev_project_reset_client_callback($nid){
	$project = new Project($nid);
	$user = new User();
	$user->load($project->client->uid);
	$user->send_client_project_login($project);
	drupal_set_message('Client login information has been reset and sent to the user.');
	drupal_goto($project->project_path);
}

/**
 * Menu callback: project approve
 */
function bxdev_project_approve_callback($nid){
	$project = new Project($nid);
	// set the approved value to 1 (TRUE)
	$project->project->field_approved['und'][0]['value'] = 1; 
	// save the node
	node_save($project->project);
	if(!$project->overridden){
		// set the status to 6 - Approved
		$project->set_status(6);
	}
	// send emails
	$project->send_approved();
	// log the action
	$project->log('admin', 'Project approved');
	// print a success message
	drupal_set_message('Project ' . $project->project->title . ' has been approved!');
	// redirect back to project
	drupal_goto($project->project_path);
}

/**
 * Menu callback: download production details
 */
function bxdev_project_download_production_details($node){
	
	header( 'Pragma: public' ); 
	header( 'Content-Type: application/msword' ); 
	header( 'Content-Disposition: attachment; filename="' . str_replace(' ', '_', strtolower($node->title)) .  '_production_details.doc"' );
	
	$project = new Project($node->nid);
	
	$output = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">';
	$output .= '<style type="text/css">
		body {font-family: Arial; font-size: 20px;}
		.field {margin-bottom: 20px;}
		.field-label {font-weight: bold;}
	</style>';
	$output .= '<body>';
	$output .= '<h1>' . $node->title . ' Production Details</h1>';
	
	$output .= '<div class="field-label">Client name:</div>';
	$output .= '<div class="field">' . $project->client->field_name['und'][0]['value'] . '</div>';
	$output .= '<div class="field-label">Client email:</div>';
	$output .= '<div class="field">' . $project->client->mail . '</div>';
	$output .= '<div class="field-label">Client phone:</div>';
	$output .= '<div class="field">' . $project->client->field_phone['und'][0]['value'] . '</div>';
	
	$output .= '<div class="field-label">Business address:</div>';
	$output .= '<div class="field">' . nl2br($project->business->field_address['und'][0]['value']) . '</div>';
	$output .= '<div class="field-label">Business website:</div>';
	$output .= '<div class="field">' . $project->business->field_website['und'][0]['value'] . '</div>';	
	
	$output .= render(field_view_field('node', $node, 'field_shoot_date'));
	$output .= render(field_view_field('node', $node, 'field_voice_over'));
	$output .= render(field_view_field('node', $node, 'field_voice_over_gender'));
	$output .= render(field_view_field('node', $node, 'field_owner_interview'));
	$output .= render(field_view_field('node', $node, 'field_script_notes'));
	$output .= render(field_view_field('node', $node, 'field_logo'));
	$output .= render(field_view_field('node', $node, 'field_photos'));
	$output .= render(field_view_field('node', $node, 'field_features_include'));
	$output .= render(field_view_field('node', $node, 'field_features_avoid'));
	$output .= render(field_view_field('node', $node, 'field_unique'));
	$output .= '</body>';
	$output .= '</html>';	
	
	print $output;	
}

/**
 * Menu callback: project terms client resend
 */
function bxdev_project_terms_client_resend($nid){
	$project = new Project($nid);
	$project->create_client_terms_hash();
	$project->send_client_terms();
	drupal_set_message('Terms email has been sent to the Client');
	drupal_goto('node/' . $nid);
}

/**
 * Menu callback: spec contact
 */
function bxdev_project_spec_contact($nid){
	$project = new Project($nid);
	$project->send_spec_contact();
	drupal_set_message('Thank you! A sales representative will contact you shortly!');
	drupal_goto('node/' . $nid);
}

/**
 * Menu callback: spec client send
 */
function bxdev_project_spec_client($nid){
	// load the project
	$project = new Project($nid);
	// load the client
	$user = new User();
	$user->load($project->client->uid);
	// send the login details
	$user->send_client_project_login($project);
	// delete any existing notification records
	db_delete('project_spec_notify')
		->condition('pid', $project->project->nid)
		->execute();
	// add a new notification record
	db_insert('project_spec_notify')
		->fields(array(
			'pid' => $project->project->nid,
			'uid' => $project->client->uid,
		))
		->execute();
	drupal_set_message('Client has been emailed login details.');
	drupal_goto('node/' . $nid);
}

/**
 * Menu callback: photo download
 */
function bxdev_project_photo_download_callback($node){
	// double check that the video is approved before allowing the photo download
	if(!empty($node->field_approved['und'][0]['value']) && $node->field_approved['und'][0]['value'] == 1){
		
		// $results = db_select('project_photos_approval', 'ppa')
		// 	->fields('ppa', array('fid'))
		// 	->condition('nid', $node->nid)
		// 	->execute()
		// 	->fetchAll();
			
		// if(!empty($results)){
		if(!empty($node->field_project_photos['und'])){
			
			// make sure our overall project photo directory exists and has proper permissions
			$dirname = 'public://project_photo_zip';
			file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
			
			// make sure our project specific photo directory exists and has proper permissions
			$photos_dir = strtolower(preg_replace('/[^0-9A-za-z]/', '_', $node->title)) . '_photos';
			$photos_dir = preg_replace('/[_]+/', '_', $photos_dir);
			
			// our zip file destination
			$destination = 'sites/default/files/project_photo_zip/' . $photos_dir . '.zip';
			
			// create the ZipArchive object
			$zip = new ZipArchive();
			if($zip->open($destination, ZIPARCHIVE::OVERWRITE) !== true) {
				watchdog('photo_download', 'Photo zip could not initiate - $zip->open(): ' . $destination);
				return false;
			}
			
			// add each file to the zip
			foreach($node->field_project_photos['und'] as $photo){
				// $file = file_load($photo->fid);
				// $zip->addFile('sites/default/files/' . $photo['filename'], $photos_dir . '/' . $photo['filename']);
				$zip->addFile('sites/default/files/' . str_replace('public://', '', $photo['uri']), $photos_dir . '/' . $photo['filename']);
			}

			// close the zip
			$zip->close();
			
			// if the zip was successfully created, set the headers and force the download
			if(file_exists($destination)){
				// generate a friendly url for the zip file
				$file_url = file_create_url($dirname . '/' . $photos_dir . '.zip');
				drupal_goto($file_url);
			}else{
				watchdog('photo_download', 'Photo zip download failed: ' . $destination);
				drupal_set_message('The photo download could not be completed. Please try again later.');
				drupal_goto('node/' . $node->nid);				
			}
		}
	
	// no approved photos exist
	}else{
		drupal_set_message('Project must be approved before downloading photos.');
		drupal_goto('node/' . $node->nid);
	}
}

/* creates a compressed zip file */
function create_zip($files = array(), $destination = '', $overwrite = false) {
	//if the zip file already exists and overwrite is false, return false
	if(file_exists($destination) && !$overwrite) { return false; }
	//vars
	$valid_files = array();
	//if files were passed in...
	if(is_array($files)) {
		//cycle through each file
		foreach($files as $file) {
			//make sure the file exists
			if(file_exists($file)) {
				$valid_files[] = $file;
			}
		}
	}
	//if we have good files...
	if(count($valid_files)) {
		//create the archive
		$zip = new ZipArchive();
		if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
			return false;
		}
		//add the files
		foreach($valid_files as $file) {
			$zip->addFile($file,$file);
		}
		//debug
		//echo 'The zip archive contains ',$zip->numFiles,' files with a status of ',$zip->status;
		
		//close the zip -- done!
		$zip->close();
		
		//check to make sure the file exists
		return file_exists($destination);
	}
	else
	{
		return false;
	}
}


/**
 * Access callback: client terms
 */
function bxdev_project_client_terms_access($nid, $hash){
	$result = db_select('users_project_terms', 'u')
		->fields('u')
		->condition('nid', $nid)
		->condition('hash', $hash)
		->execute();
	if($result->rowCount() > 0){
		return TRUE;
	}
	return FALSE;
}

/**
 * Return the production log per node
 */
function bxdev_project_get_production_log($nid){
	$results = db_query("SELECT DATE_FORMAT(DATE_ADD(date, INTERVAL 2 HOUR), '%c/%e/%y %l:%i%p') as date, message, user_uid FROM {production_log} WHERE project_nid = :nid", array(':nid' => $nid));
	$output = '';
	if($results->rowCount() > 0){
		foreach($results as $result){
			$user = user_load($result->user_uid);
			$output .= '<div class="log-row">';
			$output .= '<strong>' . strtolower($result->date) . ': ' . $user->field_name['und'][0]['value'] . '</strong><br />';
			$output .= $result->message;
			$output .= '</div>';
		}
	}
	return $output;
}

/**
 * Return a project description (used for invoices) depending on the project type value
 */
function bxdev_project_get_project_description($value){
	$description = '';
	switch($value){
		case '449':
			$description = 'Standard Lightswitch Video';
			break;
		
		case '549':
			$description = 'Standard Lightswitch Video with Interview';
			break;
			
		case '599':
			$description = 'Standard Lightswitch Video with Voice Over';
			break;
			
		case '50':
			$description = 'Monthly Subscription';
			break;
			
		default:
			$description = 'Custom';
			break;
	}
	
	return $description;
}






