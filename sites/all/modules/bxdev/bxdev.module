<?php

/**
 * HOOKS
 */

/**
 * Alter content in Administration menu bar before it is rendered.
 */
function bxdev_admin_menu_output_alter(&$content) {
  // remove Tasks and Index
  $admin_menu_exclusions = array(
    t('Tasks'),
    t('Index'),
  );
  foreach($content['menu'] as $menu_key => $menu_tree) {
    if (in_array($menu_tree['#title'], $admin_menu_exclusions))
      unset($content['menu'][$menu_key]);
  }
}

/**
 * Implements hook_menu().
 */
function bxdev_menu() {
	
  $items['get/body/%'] = array(
    'page callback' => 'bxdev_get_node_body',
		'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	$items['get/video/%node'] = array(
		'page callback' => 'bxdev_get_video',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

  return $items;
}

/**
 * Implements hook_node_access().
 */
function bxdev_node_access($node, $op, $account) {
	global $user;
	$is_anon = $user->uid == 0;	
	if($op == 'view'){	
		// project
		if($node->type == 'project'){
			if($is_anon){
				$path = substr($_SERVER['REQUEST_URI'], 1);
				drupal_goto('user', array('query' => array('url' => $path)));
			}		
		// business
		}else if($node->type == 'business'){
			if($is_anon && $node->field_public_access['und'][0]['value'] !== '1'){
				return NODE_ACCESS_DENY;
			}	
		}	
		return NODE_ACCESS_ALLOW;	
	}	
}

/**
 * Implements hook_preprocess_page().
 */
function bxdev_preprocess_page(&$vars){
	drupal_add_js('Drupal.behaviors.password = function () {};', array('type' => 'inline', 'scope' => 'footer'));
	$vars['no_title'] = FALSE;
	// node type business, project
	if(isset($vars['node'])){
		if(($vars['node']->type == 'business' || $vars['node']->type == 'project') && arg(2) !== 'edit' && arg(2) !== 'delete'){
			$vars['no_title'] = TRUE;
		}		
	}
	// sales/add/business
	if(arg(0) == 'sales' && arg(1) == 'add' && arg(2) == 'business'){
		$vars['no_title'] = TRUE;
	}
	// sales/add/project
	if(arg(0) == 'sales' && arg(1) == 'add' && arg(2) == 'project'){
		$vars['no_title'] = TRUE;
	}
}

/**
 * Return an array of times for an html select field
 */
function bxdev_get_times_array(){
	$times = array(
		'' => '',
		'0:00' => '12:00am',
		'0:15' => '12:15am',
		'0:30' => '12:30am',
		'0:45' => '12:45am',
		'1:00' => '1:00am',
		'1:15' => '1:15am',
		'1:30' => '1:30am',
		'1:45' => '1:45am',
		'2:00' => '2:00am',
		'2:15' => '2:15am',
		'2:30' => '2:30am',
		'2:45' => '2:45am',
		'3:00' => '3:00am',
		'3:15' => '3:15am',
		'3:30' => '3:30am',
		'3:45' => '3:45am',
		'4:00' => '4:00am',
		'4:15' => '4:15am',
		'4:30' => '4:30am',
		'4:45' => '4:45am',
		'5:00' => '5:00am',
		'5:15' => '5:15am',
		'5:30' => '5:30am',
		'5:45' => '5:45am',
		'6:00' => '6:00am',
		'6:15' => '6:15am',
		'6:30' => '6:30am',
		'6:45' => '6:45am',
		'7:00' => '7:00am',
		'7:15' => '7:15am',
		'7:30' => '7:30am',
		'7:45' => '7:45am',
		'8:00' => '8:00am',
		'8:15' => '8:15am',
		'8:30' => '8:30am',
		'8:45' => '8:45am',
		'9:00' => '9:00am',
		'9:15' => '9:15am',
		'9:30' => '9:30am',
		'9:45' => '9:45am',
		'10:00' => '10:00am',
		'10:15' => '10:15am',
		'10:30' => '10:30am',
		'10:45' => '10:45am',
		'11:00' => '11:00am',
		'11:15' => '11:15am',
		'11:30' => '11:30am',
		'11:45' => '11:45am',
		'12:00' => '12:00pm',
		'12:15' => '12:15pm',
		'12:30' => '12:30pm',
		'12:45' => '12:45pm',
		'13:00' => '1:00pm',
		'13:15' => '1:15pm',
		'13:30' => '1:30pm',
		'13:45' => '1:45pm',
		'14:00' => '2:00pm',
		'14:15' => '2:15pm',
		'14:30' => '2:30pm',
		'14:45' => '2:45pm',
		'15:00' => '3:00pm',
		'15:15' => '3:15pm',
		'15:30' => '3:30pm',
		'15:45' => '3:45pm',
		'16:00' => '4:00pm',
		'16:15' => '4:15pm',
		'16:30' => '4:30pm',
		'16:45' => '4:45pm',
		'17:00' => '5:00pm',
		'17:15' => '5:15pm',
		'17:30' => '5:30pm',
		'17:45' => '5:45pm',
		'18:00' => '6:00pm',
		'18:15' => '6:15pm',
		'18:30' => '6:30pm',
		'18:45' => '6:45pm',
		'19:00' => '7:00pm',
		'19:15' => '7:15pm',
		'19:30' => '7:30pm',
		'19:45' => '7:45pm',
		'20:00' => '8:00pm',
		'20:15' => '8:15pm',
		'20:30' => '8:30pm',
		'20:45' => '8:45pm',
		'21:00' => '9:00pm',
		'21:15' => '9:15pm',
		'21:30' => '9:30pm',
		'21:45' => '9:45pm',
		'22:00' => '10:00pm',
		'22:15' => '10:15pm',
		'22:30' => '10:30pm',
		'22:45' => '10:45pm',
		'23:00' => '11:00pm',
		'23:15' => '11:15pm',
		'23:30' => '11:30pm',
		'23:45' => '11:45pm',			
	);
	return $times;
}

/**
 * Implementation hook_token_info().
 */
function bxdev_token_info() {
  $types['project'] = array(
    'name' => t('Project'),
    'description' => t('Project tokens'),
  );

  $types['videographer'] = array(
		'name' => t('Videographer'),
		'description' => t('Videographer tokens'),
	);
	
	$types['sales'] = array(
		'name' => t('Sales'),
		'description' => t('Sales tokens'),
	);
  
	$types['pc'] = array(
		'name' => t('PC'),
		'description' => t('PC tokens'),
	);
	
	$types['user'] = array(
		'name' => t('User'),
		'description' => t('User tokens'),
	);
	
	$types['client'] = array(
		'name' => t('Client'),
		'description' => t('Client tokens'),
	);	
	
  // project tokens.
  $project['project_url'] = array(
    'name' => t('Project URL'),
    'description' => t('The Project URL'),
  );

	$videographer['full_name'] = array(
		'name' => t('Videographer full name'),
		'description' => t('The Videographer full name'),
	);
	
	$sales['full_name'] = array(
		'name' => t('Sales full name'),
		'description' => t('The Sales full name'),
	);
	
	$pc['full_name'] = array(
		'name' => t('PC full name'),
		'description' => t('The PC full name'),
	);
	
	$user['username'] = array(
		'name' => t('Username'),
		'description' => t('Username'),
	);
  
	return array(
	  'types' => $types,
	  'tokens' => array(
	    'project' => $project,
			'videographer' => $videographer,
			'sales' => $sales,
			'pc' => $pc,
			'user' => $user,
	  ),
	);
}

/**
 * Implementation of hook_tokens().
 */
function bxdev_tokens($type, $tokens, array $data = array(), array $options = array()){
	
	global $base_url;
	$replacements = array();
	
	// offer tokens
	if($type == 'project'){
		
		foreach($tokens as $name => $original){
			switch($name){				
				case 'title':
					$replacements[$original] = $data['project']->project->title;
					break;
				
				case 'project_url':
					$replacements[$original] = $base_url . '/' . drupal_lookup_path('alias', 'node/' . $data['project']->project->nid);
					break;
					
				case 'project_link':
					$replacements[$original] = $data['project_link'];
					break;
					
				case 'project_terms_link':
					$replacements[$original] = $base_url . '/client/terms/' . $data['project']->project->nid . '/' . $data['project']->hash;
					break;
					
				case 'project_type_description':
					if(!empty($data['project']->project->field_line_item_desc['und'][0]['value'])){
						$replacements[$original] = $data['project']->project->field_line_item_desc['und'][0]['value'];
					}else{
						$project_type = $data['project']->project->field_project_type['und'][0]['value'];
						$replacements[$original] = bxdev_project_get_project_description($project_type);
					}
					break;
					
				case 'project_charge':
					$per_month = $data['project']->project->field_project_type['und'][0]['value'] == '50' ? ' per month' : '';
					$project_charge = $data['project']->project->field_charge_amount['und'][0]['value'];
					$replacements[$original] = bxdev_format_currency($project_charge) . $per_month;
					break;
					
				case 'shoot_date':
					$replacements[$original] = date('m-d-Y g:ia', $data['project']->project->field_shoot_date['und'][0]['value']);
					break;
					
				case 'amount':
					$replacements[$original] = bxdev_format_currency($data['amount']);
					break;
					
				case 'cc_type':
					$cc_type = '';
					$replacements[$original] = $cc_type;
					break;
					
				case 'cc_four':
					$cc_four = bxdev_payment_get_cc_last_four($data['project']->project->field_payment_id['und'][0]['value'], $data['project']->client->uid);
					$replacements[$original] = $cc_four;
					break;
					
				case 'pc:full_name':
					$replacements[$original] = $data['project']->pc->field_name['und'][0]['value'];
					break;
				
				case 'pc:email':
					$replacements[$original] = $data['project']->pc->mail;
					break;
				
				case 'pc:phone':
					$replacements[$original] = $data['project']->pc->field_phone['und'][0]['value'];
					break;
					
				case 'sales:full_name':
					$replacements[$original] = $data['project']->sales->field_name['und'][0]['value'];
					break;

				case 'sales:email':
					$replacements[$original] = $data['project']->sales->mail;
					break;

				case 'sales:phone':
					$replacements[$original] = $data['project']->sales->field_phone['und'][0]['value'];
					break;						
					
				case 'client:full_name':
					$replacements[$original] = $data['project']->client->field_name['und'][0]['value'];
					break;
				
				case 'client:phone':
					$replacements[$original] = $data['project']->client->field_phone['und'][0]['value'];
					break;
					
				case 'client:email':
					$replacements[$original] = $data['project']->client->mail;
					break;
					
				case 'client:username':
					$replacements[$original] = $data['project']->client->name;
					break;
			
				case 'client:password':
					$account = new User();
					$account->load($data['project']->client->uid);
					$account->reset_password();
					$replacements[$original] = $account->password;
					break;
					
				case 'videographer:full_name':
					$replacements[$original] = $data['project']->videographer->field_name['und'][0]['value'];
					break;
					
				case 'videographer:address':
					$profile = profile2_load_by_user($data['project']->videographer, 'videographer');
					$replacements[$original] = nl2br($profile->field_address['und'][0]['value']);
					break;
				
				case 'videographer:amount':
					$replacements[$original] = $data['amount'];
					break;
					
				case 'business:title':
					$replacements[$original] = $data['project']->business->title;
					break;
					
				case 'business:address':
					$replacements[$original] = nl2br($data['project']->business->field_address['und'][0]['value']);
					break;
					
				case 'comment:comment':
					$replacements[$original] = $data['comment'];
					break;
					
				case 'comment:date':
					$replacements[$original] = $data['comment_date'];
					break;
					
				case 'comment:author':
					$replacements[$original] = $data['comment_author'];
					break;
					
				case 'comment:declined_reason':
					$replacements[$original] = $data['declined_reason'];
					break;					
			}
		}
		
	}else if($type == 'videographer'){
		
		foreach($tokens as $name => $original){
			switch($name){				
				case 'full_name':
					$replacements[$original] = !empty($data['full_name']) ? $data['full_name'] : '________';
					break;
					
				case 'username':
					$replacements[$original] = $data['username'];
					break;
			
				case 'password':
					$replacements[$original] = $data['password'];
					break;
					
				case 'login_link':
					$replacements[$original] = $data['login_link'];
					break;
					
				case 'address':
					$replacements[$original] = !empty($data['address']) ? $data['address'] : '________';
					break;					
			}
		}
						
	}else if($type == 'sales'){

		foreach($tokens as $name => $original){
			switch($name){				
				case 'full_name':
					$replacements[$original] = $data['full_name'];
					break;

				case 'username':
					$replacements[$original] = $data['username'];
					break;

				case 'password':
					$replacements[$original] = $data['password'];
					break;

				case 'login_link':
					$replacements[$original] = $data['login_link'];
					break;
			}
		}
					
	}else if($type == 'pc'){

		foreach($tokens as $name => $original){
			switch($name){				
				case 'full_name':
					$replacements[$original] = $data['full_name'];
					break;

				case 'username':
					$replacements[$original] = $data['username'];
					break;

				case 'password':
					$replacements[$original] = $data['password'];
					break;

				case 'login_link':
					$replacements[$original] = $data['login_link'];
					break;
			}
		}	
						
	}else if($type == 'user'){
		
		foreach($tokens as $name => $original){
			switch($name){				
				case 'username':
					$replacements[$original] = $data['username'];
					break;

				case 'password':
					$replacements[$original] = $data['password'];
					break;

				case 'login_link':
					$replacements[$original] = $data['login_link'];
					break;
			}
		}					
		
	}else if($type == 'client'){
		
		foreach($tokens as $name => $original){
			switch($name){				
				case 'date':
					$replacements[$original] = date('m-d-Y', time());
					break;
					
				case 'cc':
					$replacements[$original] = $data['cc'];
					break;
			}
		}					
		
	}else if($type == 'partner'){
		
		foreach($tokens as $name => $original){
			switch($name){
				case 'title':
					$replacements[$original] = $data['partner']->title;
					break;
				
				case 'manual_city':
					$manual_city = '';
					if(!empty($data['city_manual'])){
						$manual_city = 'Partner has entered a manual city: ' . $data['city_manual'];
					}
					$replacements[$original] = $manual_city;
					break;
			}
		}
		
	}
			
	return $replacements;
}

/**
 * Implements hook_block_info().
 */
function bxdev_block_info() {
  $blocks['contact_form']['info'] = t('Contact form');
	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bxdev_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'contact_form':
			// get the contact form
			$form = render(module_invoke('webform', 'block_view', 'client-block-1442'));
			$output = '<div class="contact-form-wrapper-fixed"></div>';
			$output .= '<div class="contact-form-wrapper">';
			$output .= '<a href="" class="close">X</a><h2>Get started with Lightswitch</h2>';
			$output .= $form;
			$output .= '</div>';
      $block['content'] = $output;
      break;
  }
  return $block;
}

/**
* Implements hook_entity_info_alter().
*/
function bxdev_entity_info_alter(&$entity_info) {
	
	// business video thumbnail
  $entity_info['file']['view modes']['business_thumb'] = array(
    'label' => t('Business thumb'),
    'custom settings' => TRUE,
  );

	// gallery slideshow video image
	$entity_info['file']['view modes']['video_gallery_slideshow'] = array(
	  'label' => t('Video gallery slideshow'),
	  'custom settings' => TRUE,
	);
	
	// gallery slideshow video image
	$entity_info['file']['view modes']['video_gallery_thumbs'] = array(
	  'label' => t('Video gallery thumbs'),
	  'custom settings' => TRUE,
	);

}


/**
 * FORMS
 */

function bxdev_form_webform_client_form_1442_alter(&$form, &$form_state){
	$form['actions']['submit']['#ajax'] = array(
		'callback' => 'bxdev_pricing_contact_callback',
		'wrapper' => 'webform-client-form-1442',
	);
}

/**
 * Form AJAX callback: pricing contact
 */
function bxdev_pricing_contact_callback($form, $form_state){
	if(form_get_errors()){
		return $form;
	}
	return '<h3>Thank you!</h3><p>We will be in contact soon.</p>';
}


/**
 * CALLBACKS
 */

/**
 * Menu callback: get video (front end)
 */
function bxdev_get_video($node){
	
	$file = file_load($node->field_gallery_video['und'][0]['fid']);
	
	// $path = file_create_url($file->uri);
	
	$output = '<style type="text/css">
	body {
		padding: 20px;
		margin: 0;
		background: #fff;
	}
	
	.btn {
		background-color: #D8611F;
	  background-image: -moz-linear-gradient(center top , #CF5918 0%, #D45D0D 30%, #CF5918 50%, #FF7E2F 100%);
	  border: 1px solid #9C3D00;
	  border-radius: 5px 5px 5px 5px;
	  box-shadow: 0 0 0 1px rgba(255, 115, 100, 0.4) inset, 0 1px 3px #333333;
	  color: #FFFFFF;
	  font: bold 20px/1 "helvetica neue",helvetica,arial,sans-serif;
	  padding: 10px 15px;
	  text-align: center;
	  text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.8);
	  text-transform: none;
		text-decoration: none;
	}
	
	.btn-wrap {
		padding-top: 30px;
		text-align: right;
	}
	
	.media-vimeo-preview-wrapper {
		background: #000;
	}
	
	</style>';
	
	switch($file->filemime){
		// ezweb
		case 'video/ezweb':
			$vars = array(
				'uri' => $file->uri,
				'width' => 560,
				'height' => 340,
			);
			$output .= theme('media_ezweb_video', $vars);
			break;
		
		// vimeo
		default:
			$file = (array) $file;
			$output .= theme('media_vimeo_video', $file);
			break;
	}
	
	$output .= '<div class="btn-wrap"><a href="#" class="btn" onclick="parent.window.location = \'/video-production-services\'">Learn More</a></div>';
	
	print $output;
}


/**
 * CUSTOM
 */

/**
 * Return the formatted body of a given node
 */
function bxdev_get_node_body($nid){
	
	$project = new Project(1243);
	$line_items[] = array(
		'qty' => 1,
		'description' => 'Standard Lightswitch Video',
		'unit_price' => 299,
		'line_total' => 299,
	);
	$line_items[] = array(
		'qty' => 1,
		'description' => 'Standard Lightswitch Video with Interview',
		'unit_price' => 399,
		'line_total' => 399,
	);
	$line_items['total'] = 600;
	$invoice_num = 101;	
	
	print theme('invoice', array('project' => $project, 'line_items' => $line_items, 'invoice_num' => $invoice_num));
	
	// $node = node_load($nid);
	// $body = '<link href="/' . drupal_get_path('theme', 'bms') . '/css/bms_shadowbox.css" rel="stylesheet" type="text/css">';
	// // drupal_add_css(drupal_get_path('theme', 'bms') . '/css/bms_shadowbox.css', $option['type'] = 'inline');
	// $body .= $node->body['und'][0]['value'];
	// $body = token_replace($body);
	// print $body;
}

/**
 * Format currency
 */
function bxdev_format_currency($value, $sign = TRUE){
	if(!$sign){
		$currency_formatted = money_format('%i', $value);
	}else{
		$currency_formatted = '$' . money_format('%i', $value);
	}
	return $currency_formatted;
}

/**
 * Return a filename friendly string
 */
function bxdev_get_filename_string($string){
	// generate a clean client name used in the file name
	return preg_replace('/[^\w\.-]/', '_', strtolower($string));
}


