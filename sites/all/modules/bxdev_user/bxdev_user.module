<?php

$GLOBALS['partner_theme'] = 'default';

module_load_include('inc', 'bxdev_user', 'bxdev_user.forms');

/**
 * HOOKS
 */

/**
 * Implements hook_permission().
 */
function bxdev_user_permission() {
  return array(
    'view production details' =>  array(
      'title' => t('View production details'),
      'description' => t('View project production details.'),
    ),
	  'view production history' =>  array(
	    'title' => t('View production history'),
	    'description' => t('View project production history.'),
	  ),
		'change password' =>  array(
	    'title' => t('Change password'),
	    'description' => t('Change password.'),
	  ),
		'sales' =>  array(
	    'title' => t('Sales user permissions'),
	    'description' => t('Sales user permissions.'),
	  ),
		'pc' =>  array(
	    'title' => t('Production coordinator permissions'),
	    'description' => t('Production coordinator permissions.'),
	  ),
		'client' =>  array(
	    'title' => t('Client user permissions'),
	    'description' => t('Client user permissions.'),
	  ),
		'videographer' =>  array(
	    'title' => t('Videographer user permissions'),
	    'description' => t('Videographer user permissions.'),
	  ),
		'view project photos' =>  array(
	    'title' => t('View project photos'),
	    'description' => t('View project photos.'),
	  ),
		'upload business logo' =>  array(
		  'title' => t('Upload business logo'),
		  'description' => t('Upload business logo.'),
		),
		'upload videographer documents' =>  array(
		  'title' => t('Upload videographer documents'),
		  'description' => t('Upload videographer documents.'),
		),
		'add new project' => array(
			'title' => t('Add a new project'),
			'description' => t('Add a new project.'),
		),
  );
}

/**
 * Implements hook_menu().
 */
function bxdev_user_menu() {
  $items['user/%user/new'] = array(
    'title' => 'Create new user',
    'page callback' => 'bxdev_user_create_user_page',
    // 'access arguments' => array('administer users'),
		'access arguments' => array(1),
		'access callback' => 'bxdev_user_create_user_access',
		'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

	$items['user/change/password'] = array(
		'title' => t('Change password'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('bxdev_user_change_password_form'),
		'access arguments' => array('change password'),
		'type' => MENU_CALLBACK,
	);
	
	$items['user/%/password/forgot'] = array(
		'page callback' => 'bxdev_user_password_forgot',
		'page arguments' => array(1),
		'access arguments' => array('change password'),
		'type' => MENU_CALLBACK,
	);
	
	$items['user/accept-terms'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('bxdev_user_accept_terms_form'),
		'access arguments' => array('videographer'),
		'type' => MENU_CALLBACK,
	);
	
	$items['user/%/all'] = array(
		'title' => t('All projects'),
		'page callback' => 'bxdev_user_all_projects_page',
		'page arguments' => array(1),
		'access callback' => 'bxdev_user_page_access',
		'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
	);
	

  return $items;
}

/**
 * Implements hook_user_insert().
 */
function bxdev_user_user_presave(&$edit, $account, $category) {
	// if new user, set the first time login flag
	if(!isset($edit['data']['first_time_login'])){
  	$edit['data']['first_time_login'] = 1;
	}
}

/**
 * Implements hook_user_login().
 */
function bxdev_user_user_login(&$edit, $account) {
	// if first time login
	bxdev_user_first_time_login_check($account);
	
	// if first time login does not redirect user, check for terms acceptance
	bxdev_user_terms_accept_check($account);
	
	if(isset($_GET['url']) && $_GET['url'] != ''){
		$url = $_GET['url'];
		drupal_goto($url);
	}
}

/**
 * Implements hook_user_logout().
 */
function bxdev_user_user_logout($account) {
  $profile = profile2_load_by_user($account->uid, 'client');
	if($profile && !empty($profile->field_client_partner_theme['und'][0]['nid'])){
		$query['query']['partner_theme'] = $profile->uid;
		session_destroy();
		drupal_goto('user', $query);
	}
}



/**
 * Implements hook_mail().
 */
function bxdev_user_mail($key, &$message, $params) {
	
	global $base_url;
	$email = bxdev_email_get_email_by_name($key);
	
	$message['subject'] = token_replace($email->subject, $params);
	$message['body'][] = token_replace($email->body, $params);
	
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
	
	if(!empty($params['headers']['cc'])){
		$message['headers']['cc'] = $params['headers']['cc'];
	}
	
	if(!empty($params['headers']['bcc'])){
		$message['headers']['bcc'] = $params['headers']['bcc'];
	}
	
}

/**
 * Implementation of hook_menu_local_tasks_alter().
 */
function bxdev_user_menu_local_tasks_alter(&$data, $router_item, $root_path){
	// if user profile page
	if(arg(0) == 'user' && is_numeric(arg(1))){
		$user = user_load(arg(1));
		// pc
		if(isset($user->roles[4])){
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Your Projects';
			$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';
			unset($data['tabs'][1]);	
		// videographer
		}else	if(isset($user->roles[5])){
			if(!empty($data['tabs'][0])){
				$data['tabs'][0]['output'][0]['#link']['title'] = 'Your Projects';
				$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';
				unset($data['tabs'][0]['output'][1]);
			}
			if(!empty($data['tabs'][1])){
				$data['tabs'][1]['output'][0]['#link']['title'] = 'Account settings';
				$data['tabs'][1]['output'][1]['#link']['title'] = 'Videographer details';
			}
		// sales
		}else	if(isset($user->roles[6])){
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Your Projects';
			$data['tabs'][0]['output'][1]['#link']['title'] = 'Account info';		
		// client
		}else if(isset($user->roles[7])){
			$data['tabs'][0]['output'][0]['#link']['title'] = 'Active projects';
			$data['tabs'][0]['output'][2]['#link']['title'] = 'Account info';
			if(isset($data['tabs'][1]['output'][2]['#link']) && $data['tabs'][1]['output'][2]['#link']['title'] == 'Videographer'){
				unset($data['tabs'][1]['output'][2]);
			}
		}
	}
	
	// get the logged in user
	global $user;
	// if user is pc and viewing a videographer profile page
	if(bxdev_user_get_role($user->uid) == 'pc' && arg(2) == 'info'){
		// remove the user tabs
		unset($data['tabs']);
	}
	
}

/**
 * Implementation of hook_preprocess_user_profile(). 
 */
function bxdev_user_preprocess_user_profile(&$vars){
	$uid = arg(1);
	$user = user_load($uid);
	$output = '';
	// pc
	if(isset($user->roles[4])){
		$output .= '<div class="">';
		$output .= '<a href="/projects/master" class="add-project">Master project list</a> ';
		$output .= '<a href="/sales/add/business" class="add-project">+ Add project</a> ';
		$output .= '<a href="/sales/add/cc" class="add-project">+ Add project (cc)</a>&nbsp;&nbsp;&nbsp;&nbsp;';
		$output .= '<a class="add-project" href="/videographers">Videographers directory</a> ';
		$output .= '<a class="add-project" href="/admin/clients">Clients</a> ';
		$output .= '<a href="/admin/structure/types" class="add-project">Admin settings</a> ';
		$output .= '</div><br />';
		$output .= views_embed_view('projects', 'pc_landing', $vars['user']->uid, $vars['user']->uid);
	// videographer
	}else if(isset($user->roles[5])){
		$output .= views_embed_view('projects', 'block_2');
	// sales
	}else if(isset($user->roles[6])){
		$output .= views_embed_view('projects', 'block');
	// client
	}else if(isset($user->roles[7])){
		$output .= views_embed_view('projects', 'client_active');
	}
	$vars['user_profile'] = $output;
	
}

/**
 * Implements hook_preprocess_html().
 */
function bxdev_user_preprocess_html(&$variables) {
	global $user;
	global $partner_theme;
	
	$arg2 = arg(2);
	// if pc user and url is user/%
	if(bxdev_user_get_role($user->uid) == 'pc' && (arg(0) == 'user' && is_numeric(arg(1)) && !$arg2)){
		// add body class
		$variables['classes_array'][] = 'wide-table';
	}
	
	// assign any partner theme body classes
	if($partner_theme != 'default'){
		$variables['classes_array'][] = 'partner-theme-' . strtolower(preg_replace('/[^A-Za-z0-9]/', '-', $partner_theme));
	}
}

/**
 * Implements hook_preprocess_page().
 */
function bxdev_user_preprocess_page(&$vars){
	global $user;
	$role = bxdev_user_get_role($user->uid);
	// if user page
	if(arg(0) == 'user' && is_numeric(arg(1))){
		$account = user_load(arg(1));
		// set the title
		drupal_set_title('Welcome, ' . $account->field_name['und'][0]['value']);
		
		// if user is pc and viewing a videographer profile page
		if($role == 'pc' && arg(2) == 'info'){
			drupal_set_title('Lightswitch Videographer Directory');
		}
	}	
}

/**
 * Implements hook_block_info().
 */
function bxdev_user_block_info() {
  $blocks['user_info']['info'] = 'User info';
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bxdev_user_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'user_info':
			global $user;
			$output = '';
			if($user->uid !== 0){
				$output .= '<div class="username">Logged in as ' . $user->name . '</div>';
				$output .= '<div class="actions"><a href="/user/' . $user->uid . '">Account</a> | <a href="/user/logout">Logout</a></div>';
			}else{
				// if a partner_theme url param exists, append it to the login link
				$partner_theme = '';
				if(isset($_GET['partner_theme'])){
					$partner_theme = '?partner_theme=' . $_GET['partner_theme'];
				}
				$output .= '<a href="/user' . $partner_theme . '">Login</a>';
			}
      $block['content'] = $output;
      break;
  }
  return $block;
}

/**
 * Implements hook_views_query_alter().
 */
function bxdev_user_views_query_alter(&$view, &$query){
	if($view->name == 'projects' && $view->current_display == 'pc_landing'){		
		// search all conditions and place field_project_editor and field_pc_ref in their own "OR" group
		foreach($query->where[0]['conditions'] as $key => $value){
			if(preg_match('/(field_project_editor|field_pc_ref)/', $value['field'])){
				$query->where[1]['conditions'][] = $value;
				unset($query->where[0]['conditions'][$key]);
			}
			
		}
		$query->where[1]['type'] = 'OR';
		$query->where[1]['args'] = array();
		$query->where[0]['conditions'] = array_values($query->where[0]['conditions']);	
	}
}

/**
 * Implements hook_views_pre_render().
 */
function bxdev_user_views_pre_render(&$view){
	if($view->name == 'projects' && $view->current_display == 'client_active'){
		$being_scheduled = array();
		// separate any result of status "Being scheduled" which is a system status of either 1 or 2
		foreach($view->result as $key => $result){
			// if(in_array($result->field_data_field_status_field_status_value, array('1', '2'))){
			if(in_array($result->field_data_field_status_field_status_value, array('1', '2'))){
				$being_scheduled[$result->node_title] = $result;
				unset($view->result[$key]);
			}
		}
		
		// if "Status" column was click sorted (desc), or a fresh page load
		if(($view->exposed_input['order'] == 'php' && $view->exposed_input['sort'] == 'desc') || !isset($view->exposed_input['order'])){
			// alphabetize the separated results by key
			ksort($being_scheduled);
			// dpm($being_scheduled);
			// merge back into the results
			$view->result = array_merge($view->result, $being_scheduled);
		// if "Status" column was click sorted (asc)
		}else{
			// alphabetize the separated results by key
			krsort($being_scheduled);
			// merge back into the results
			$view->result = array_merge($being_scheduled, $view->result);
		}
	}
}

/**
 * CUSTOM
 */

/**
 * Page callback: create user
 */
function bxdev_user_create_user_page(){
	$output = '';	
	$output .= drupal_render(drupal_get_form('bxdev_user_create_user_form'));	
	return $output;
}

/**
 * Page callback: password forgot
 */
function bxdev_user_password_forgot($uid){
	$user = new User();
	$user->load($uid);
	$user->send_password_reset();
	drupal_set_message('A new password has been sent to your email. You must log out to use your new password. Click <a href="/user/logout">here</a> to logout');
	drupal_goto('user/' . $uid . '/edit');
}

/**
 * Page callback: all projects
 */
function bxdev_user_all_projects_page($uid){
	$output .= views_embed_view('projects', 'client_all');
	return $output;
}

/**
 * Access callback: user page
 */
function bxdev_user_page_access($uid){
	global $user;
	if($user->uid == $uid){
		return TRUE;
	}
	return FALSE;
}

/**
 * Access callback: create new user
 */
function bxdev_user_create_user_access($account){
	global $user;
	return user_access('administer users') && $account->uid == $user->uid;
}

/**
 * Return user role
 */
function bxdev_user_get_role($uid){
	$user = user_load($uid);
	$roles = $user->roles;
	$role = 'authenticated user';
	if(array_key_exists(4, $roles)){
		$role = 'pc';
	}else if(array_key_exists(5, $roles)){
		$role = 'videographer';
	}else if(array_key_exists(6, $roles)){
		$role = 'sales';
	}else if(array_key_exists(7, $roles)){
		$role = 'client';
	}
	return $role;
}

/**
 * Converts existing Videographer nodes to users
 */
function bxdev_user_convert_videographer_nodes(){
	$results = db_query("SELECT nid FROM {node} WHERE nid = 884");
	foreach($results as $result){
		// load the node object
		$node = node_load($result->nid);
		// create a new videographer user
		$user = new User($node->field_email['und'][0]['email'], 'videographer', $node->title, $node->field_phone['und'][0]['value']);
		// load the user
		$user = $user->get_user();
		// create a new videographer profile
		$profile = profile_create(array('user' => $user, 'type' => 'videographer'));
		// assign all fields to profile
		$profile->field_region['und'][0]['value'] = $node->field_region['und'][0]['value'];
		$profile->field_address['und'][0]['value'] = $node->field_address['und'][0]['value'];
		$profile->field_transportation['und'][0]['value'] = $node->field_transportation['und'][0]['value'];
		$profile->field_skills['und'][0]['value'] = $node->field_skills['und'][0]['value'];
		$profile->field_equipment['und'][0]['value'] = $node->field_equipment['und'][0]['value'];
		$profile->field_links_work['und'][0]['value'] = $node->field_links_work['und'][0]['value'];
		$profile->field_availability['und'][0]['value'] = $node->field_availability['und'][0]['value'];
		$profile->field_rating['und'][0]['value'] = $node->field_rating['und'][0]['value'];
		$profile->field_notes['und'][0]['value'] = $node->field_notes['und'][0]['value'];
		$profile->field_resume['und'][0] = $node->field_resume['und'][0];
		// save the profile
		profile2_save($profile);
	}
}

/**
 * Check if user has accepted the terms and policies
 */
function bxdev_user_terms_accept_check($account){
	// check if videographer
	if(bxdev_user_get_role($account->uid) == 'videographer'){
		// load the user's profile		
		$profile = profile2_load_by_user($account, 'videographer');
		// check if videographer has accepted terms
		if(empty($profile->field_videographer_terms['und'][0]['value']) || $profile->field_videographer_terms['und'][0]['value'] == 0){
			drupal_goto('user/accept-terms');
		}
	}
}

/**
 * Check if first time login for user
 */
function bxdev_user_first_time_login_check($account){
	// if first time login
	if($account->data['first_time_login']){
		$options = array();
		// check for destination param
		if(isset($_GET['url'])){
			$options['query'] = array(
				'destination' => $_GET['url'],
			);
		}
		drupal_goto('user/change/password', $options);
	}
}

/**
 * Get all emails associated with a client
 *
 * @param $user (object)
 *  - fully loaded user object
 * @param $profile_type (string)
 *  - profile type (client, videographer, etc..)
 * @return string (well-formatted email to string)
 */
function bxdev_user_get_client_emails($user){
	$addresses[] = $user->mail;
	// load the user profile
	$profile = profile2_load_by_user($user->uid, 'client');
	if($profile && !empty($profile->field_client_additional_emails['und'])){
		foreach($profile->field_client_additional_emails['und'] as $value){
			$addresses[] = $value['value'];
		}
	}		
	$addresses = implode(',', $addresses);		
	return $addresses;
}

/**
 * Determine the site logo to use, depending on the user's partner theme
 */
function bxdev_user_get_logo(){
	
	// init our variables
	global $user;
	global $partner_theme;
	$partner_theme = 'default';
	
	$account = $user;
	$profile = FALSE;
	$override = FALSE;
	$arg0 = arg(0);
	$arg1 = arg(1);
	$arg2 = arg(2);
	
	// set the default logo
	$logo = '<a href="/"><img src="/sites/all/themes/bms/images/logo.jpg" /></a>';
	
	// if partner_theme url param exists, set the profile to the param value, and set override to true
	if(isset($_GET['partner_theme'])){
		$profile = profile2_load_by_user($_GET['partner_theme'], 'client');
		// load the partner theme node object
		$theme = node_load($profile->field_client_partner_theme['und'][0]['nid']);
		// customize the page title
		drupal_set_title('Login to ' . $theme->title);
		$override = TRUE;
	}
	
	// check for a node page, or the photos page
	if(($arg0 == 'node' && is_numeric($arg1)) || ($arg0 == 'project' && $arg2 == 'photos')){
		// load the node object
		$node = node_load($arg1);
		// if project node
		if($node->type == 'project'){
			// load the project object
			$project = new Project($arg1);
			// set the account to the project client
			$account = $project->client;
			$override = TRUE;
		// if business node
		}else if($node->type == 'business'){
			// set the account to the business client reference
			$account = user_load($node->field_client_ref['und'][0]['uid']);
			$override = TRUE;
		}
	}
	
	// if any user profile page, set override to true
	if($arg0 == 'user'){
		$override = TRUE;
	}
	
	// if the client accept terms page, set override to true
	if($arg0 == 'client' && $arg1 == 'terms'){
		$override = TRUE;
		$project = new Project($arg2);
		$account = $project->client;
	}
	
	// if an override has occurred
	if($override){
		// check for a profile, if one does not exist yet, attempt to load one
		$profile = !$profile ? profile2_load_by_user($account->uid, 'client') : $profile;
		// if a profile is set and a partner theme is applied
		if($profile && !empty($profile->field_client_partner_theme['und'][0]['nid'])){
			// load the partner theme node object
			$theme = node_load($profile->field_client_partner_theme['und'][0]['nid']);
			// set the partner theme global, which will be used to generate a body class
			$partner_theme = $theme->title;
			// if a logo has been set
			if(!empty($theme->field_partner_theme_logo['und'][0]['fid'])){
				$logo = theme('image_style', array('path' => $theme->field_partner_theme_logo['und'][0]['uri'], 'style_name' => 'partner_theme_logo'));
			}
		}
	}
	print $logo;
}

/**
 * Used to determine whether to show blocks based on partner theme
 *
 * @return boolean
 */
function bxdev_user_partner_theme_global_visibility(){

	// if partner_theme url param is present, return false
	if(isset($_GET['partner_theme'])){
		return FALSE;
	}
	
	// initialize our vars
	$account = '';
	$arg0 = arg(0);
	$arg1 = arg(1);
	$arg2 = arg(2);
	
	// check for a node page, or the photos page
	if(($arg0 == 'node' && is_numeric($arg1)) || ($arg0 == 'project' && $arg2 == 'photos')){
		// load the node object
		$node = node_load($arg1);
		// if project node
		if($node->type == 'project'){
			$project = new Project($arg1);
			$account = $project->client;
		// if business node
		}else if($node->type == 'business'){
			$account = user_load($node->field_client_ref['und'][0]['uid']);
		}
	}
	
	// if any user profile page, set override to true
	if($arg0 == 'user'){
		global $user;
		$account = $user;
	}
	
	// if client terms page
	if($arg0 == 'client' && $arg1 == 'terms'){
		$project = new Project($arg2);
		$account = $project->client;
	}
	
	if(is_object($account)){
		$profile = profile2_load_by_user($account->uid, 'client');
		if($profile && !empty($profile->field_client_partner_theme['und'][0]['nid'])){
		  return FALSE;
		}
	}
	
	return TRUE;
}










